import discord
import asyncio
import os
from dotenv import load_dotenv
from vinted_scraper import VintedScraper

# Załaduj dane z pliku .env
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

intents = discord.Intents.default()
intents.messages = True
intents.message_content = True
client = discord.Client(intents=intents)

sent_items = set()
keyword = None
scraper = VintedScraper("https://www.vinted.pl")

def get_vinted_items():
    try:
        if not keyword:
            return []
        params = {
            "search_text": keyword,
            "price_to": "20",
            "per_page": "10"
        }
        items = scraper.search(params)
        return items
    except Exception as e:
        raise RuntimeError(f"Nie udało się pobrać przedmiotów: {e}")

@client.event
async def on_ready():
    print(f'✅ Bot zalogowany jako {client.user}')
    channel = client.get_channel(CHANNEL_ID)
    await check_new_items(channel)

@client.event
async def on_message(message):
    global keyword
    if message.channel.id == CHANNEL_ID and message.content.startswith("!ustaw_slowo"):
        keyword = message.content[len("!ustaw_slowo "):].strip()
        await message.channel.send(f"🔑 Słowo kluczowe ustawione na: **{keyword}**")

async def check_new_items(channel):
    while True:
        try:
            items = get_vinted_items()
            for item in items:
                if item.id not in sent_items:
                    embed = discord.Embed(
                        title=f"🛍️ {item.title}",
                        url=item.url,
                        description=f"💰 Cena: {item.price} {item.currency}\n📦 Marka: {item.brand_title}"
                    )
                    embed.add_field(name="Sprzedający", value=f"👤 {item.user.login}", inline=False)
                    
                    if hasattr(item, 'country'):
                        embed.add_field(name="Kraj", value=f"🏳️ {item.country}", inline=True)

                    if hasattr(item, "photos") and item.photos:
                        image_url = item.photos[0]
                        if isinstance(image_url, str) and image_url.startswith("http"):
                            embed.set_image(url=image_url)

                    await channel.send(embed=embed)
                    sent_items.add(item.id)
        except RuntimeError as e:
            print(f"❌ Błąd podczas pobierania przedmiotów: {e}")
        await asyncio.sleep(6)

client.run(TOKEN)
